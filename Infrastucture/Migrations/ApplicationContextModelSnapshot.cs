// <auto-generated />
using System;
using Infrastucture.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastucture.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CartId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("CartId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Carts_UserId");

                    b.ToTable("Carts", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CartItemId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("CartId")
                        .HasColumnType("integer");

                    b.Property<int>("NomenclatureId")
                        .HasColumnType("integer");

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric(18,3)");

                    b.Property<int>("Scale")
                        .HasColumnType("integer");

                    b.Property<Guid>("StockId")
                        .HasColumnType("uuid");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId");

                    b.HasIndex("NomenclatureId");

                    b.HasIndex("OrderId");

                    b.HasIndex("StockId");

                    b.ToTable("CartItems", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Gost", b =>
                {
                    b.Property<int>("IdGost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdGost"));

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdGost");

                    b.ToTable("Gosts", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("Domain.Entities.Nomenclature", b =>
                {
                    b.Property<int>("IdNomenclature")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdNomenclature"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Diameter")
                        .HasColumnType("numeric(18,3)");

                    b.Property<decimal>("FormOfLength")
                        .HasColumnType("numeric(18,3)");

                    b.Property<int>("IDFunctionType")
                        .HasColumnType("integer");

                    b.Property<int>("IDTypeNew")
                        .HasColumnType("integer");

                    b.Property<decimal>("Koef")
                        .HasColumnType("numeric(18,6)");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal>("PipeWallThickness")
                        .HasColumnType("numeric(18,3)");

                    b.Property<string>("ProductionType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("ProfileSize2")
                        .HasColumnType("numeric(18,3)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("SteelGradeId")
                        .HasColumnType("integer");

                    b.Property<Guid>("TypeIDType")
                        .HasColumnType("uuid");

                    b.HasKey("IdNomenclature");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("SteelGradeId");

                    b.HasIndex("TypeIDType");

                    b.ToTable("Nomenclatures", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Price", b =>
                {
                    b.Property<int>("NomenclatureId")
                        .HasColumnType("integer");

                    b.Property<Guid>("StockId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("NDS")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal>("PriceLimitM1")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("PriceLimitM2")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("PriceLimitT1")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("PriceLimitT2")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("PriceM")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("PriceM1")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("PriceM2")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("PriceT")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("PriceT1")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("PriceT2")
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("NomenclatureId", "StockId");

                    b.HasIndex("StockId");

                    b.ToTable("Prices", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Remnants", b =>
                {
                    b.Property<int>("NomenclatureId")
                        .HasColumnType("integer");

                    b.Property<Guid>("StockId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("AvgTubeLength")
                        .HasColumnType("numeric(18,3)");

                    b.Property<decimal>("AvgTubeWeight")
                        .HasColumnType("numeric(18,3)");

                    b.Property<decimal>("InStockM")
                        .HasColumnType("numeric(18,3)");

                    b.Property<decimal>("InStockT")
                        .HasColumnType("numeric(18,3)");

                    b.Property<decimal>("ReservedM")
                        .HasColumnType("numeric(18,3)");

                    b.Property<decimal>("ReservedT")
                        .HasColumnType("numeric(18,3)");

                    b.Property<decimal>("SoonArriveM")
                        .HasColumnType("numeric(18,3)");

                    b.Property<decimal>("SoonArriveT")
                        .HasColumnType("numeric(18,3)");

                    b.Property<bool>("UnderTheOrder")
                        .HasColumnType("boolean");

                    b.HasKey("NomenclatureId", "StockId");

                    b.HasIndex("StockId");

                    b.ToTable("Remnants", (string)null);

                    b.HasAnnotation("Relational:JsonPropertyName", "Availability");
                });

            modelBuilder.Entity("Domain.Entities.SteelGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SteelGrades");
                });

            modelBuilder.Entity("Domain.Entities.Stock", b =>
                {
                    b.Property<Guid>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("StockName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("StockId");

                    b.ToTable("Stocks", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Type", b =>
                {
                    b.Property<Guid>("IDType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("IDParentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PipeType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("IDType");

                    b.ToTable("Types", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Inn")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Inn")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("GostNomenclature", b =>
                {
                    b.Property<int>("GostsIdGost")
                        .HasColumnType("integer");

                    b.Property<int>("NomenclatureIdNomenclature")
                        .HasColumnType("integer");

                    b.HasKey("GostsIdGost", "NomenclatureIdNomenclature");

                    b.HasIndex("NomenclatureIdNomenclature");

                    b.ToTable("NomenclaturesGosts", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Cart", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.CartItem", b =>
                {
                    b.HasOne("Domain.Entities.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Nomenclature", "Nomenclature")
                        .WithMany()
                        .HasForeignKey("NomenclatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Nomenclature");

                    b.Navigation("Order");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Domain.Entities.Nomenclature", b =>
                {
                    b.HasOne("Domain.Entities.SteelGrade", "SteelGrade")
                        .WithMany("Nomenclatures")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Manufacturer", "Manufacturer")
                        .WithMany("Nomenclatures")
                        .HasForeignKey("SteelGradeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Type", "Type")
                        .WithMany()
                        .HasForeignKey("TypeIDType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manufacturer");

                    b.Navigation("SteelGrade");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Price", b =>
                {
                    b.HasOne("Domain.Entities.Nomenclature", "Nomenclature")
                        .WithMany()
                        .HasForeignKey("NomenclatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nomenclature");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Domain.Entities.Remnants", b =>
                {
                    b.HasOne("Domain.Entities.Nomenclature", "Nomenclature")
                        .WithMany("Remnants")
                        .HasForeignKey("NomenclatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nomenclature");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("GostNomenclature", b =>
                {
                    b.HasOne("Domain.Entities.Gost", null)
                        .WithMany()
                        .HasForeignKey("GostsIdGost")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Nomenclature", null)
                        .WithMany()
                        .HasForeignKey("NomenclatureIdNomenclature")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Domain.Entities.Manufacturer", b =>
                {
                    b.Navigation("Nomenclatures");
                });

            modelBuilder.Entity("Domain.Entities.Nomenclature", b =>
                {
                    b.Navigation("Remnants");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Domain.Entities.SteelGrade", b =>
                {
                    b.Navigation("Nomenclatures");
                });
#pragma warning restore 612, 618
        }
    }
}
